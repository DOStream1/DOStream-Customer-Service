name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  SonarQube-Scan:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up SonarQube Scanner
        uses: sonarsource/sonarqube-scan-action@v1
        with:
          url: ${{ secrets.SONAR_HOST_URL }}
          login: ${{ secrets.SONAR_LOGIN }}
          password: ${{ secrets.SONAR_PASSWORD }}

  build-Image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Build Docker Image
        run: |
          docker build -t Buy-it-customer-service .
          echo ${{ secrets.CI_REGISTRY_PASSWORD }} | docker login -u ${{ secrets.CI_REGISTRY_USER }} --password-stdin ${{ secrets.CI_REGISTRY }}
          docker tag Buy-it-customer-service:latest nexus.corp.4sconsult.com/Buy-it-customer-service:latest
          docker push nexus.corp.4sconsult.com/Buy-it-customer-service:latest
        env:
          CI_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
          CI_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}

  Docker-Scan:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install SSH client
        run: apt-get install openssh-client -y

      - name: Set up SSH key for Docker scan
        run: |
          eval $(ssh-agent -s)
          echo -n "$SSH_PRIVATE_KEY_INTERNAL_TRIVY" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan ${{ secrets.SSH_HOST_TRIVY }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Run Trivy scan
        run: |
          echo ${{ secrets.CI_REGISTRY_PASSWORD }} | docker login -u ${{ secrets.CI_REGISTRY_USER }} --password-stdin ${{ secrets.CI_REGISTRY }}
          trivy image --severity CRITICAL,HIGH,MEDIUM --format json -o trivy-results.json nexus.corp.4sconsult.com/Buy-it-customer-service:latest
        env:
          CI_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
          CI_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}

      - name: Upload Trivy results
        uses: actions/upload-artifact@v2
        with:
          name: trivy-results
          path: trivy-results.json

  OWSAP-Scan:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install required tools for OWSAP scan
        run: |
          apt-get update
          apt-get install -y python3-pip
          pip3 install requests
          apt-get install curl jq coreutils
          TODAY=$(date +%Y-%m-%d)
          ENDDAY=$(date -d "+${DEFECTDOJO_ENGAGEMENT_PERIOD} days" +%Y-%m-%d)
          eval $(ssh-agent -s)
          echo -n "$SSH_PRIVATE_KEY_INTERNAL_TRIVY" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan ${{ secrets.SSH_HOST_TRIVY }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Run OWSAP scan
        run: echo "Running OWSAP scan..."

  defectdojo:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up SSH key for DefectDojo
        run: |
          eval $(ssh-agent -s)
          echo -n "$SSH_PRIVATE_KEY_INTERNAL_TRIVY" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan ${{ secrets.SSH_HOST_TRIVY }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Run DefectDojo script
        run: |
          git clone "https://gitlab-ci-token:${{ secrets.CI_JOB_TOKEN }}@${{ secrets.CI_REPOSITORY_URL }}"
          cd 4sweb-v2
          scp -o StrictHostKeyChecking=no ${{ secrets.SSH_USER_TRIVY }}@${{ secrets.SSH_HOST_TRIVY }}:/home/git-trivy/trivy-results.json trivy-results.json
          ls -la

  include-dev:
    runs-on: ubuntu-latest
    needs: [SonarQube-Scan, build-Image, Docker-Scan, OWSAP-Scan, defectdojo]
    steps:
      - name: Include dev.yml
        uses: actions/checkout@v2
        with:
          repository: your-repo/dev-config-repo
          path: .github/workflows
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stg'

  include-stg:
    runs-on: ubuntu-latest
    needs: [SonarQube-Scan, build-Image, Docker-Scan, OWSAP-Scan, defectdojo]
    steps:
      - name: Include stg.yml
        uses: actions/checkout@v2
        with:
          repository: your-repo/stg-config-repo
          path: .github/workflows
        if: github.ref == 'refs/heads/stg' || github.ref == 'refs/heads/main'

  include-prod:
    runs-on: ubuntu-latest
    needs: [SonarQube-Scan, build-Image, Docker-Scan, OWSAP-Scan, defectdojo]
    steps:
      - name: Include prod.yml
        uses: actions/checkout@v2
        with:
          repository: your-repo/prod-config-repo
          path: .github/workflows
        if: github.ref == 'refs/heads/main'
