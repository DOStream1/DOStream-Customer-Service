name: CI/CD Pipeline

on:
  push:
    branches:
      - '*'
      

jobs:
#   sonarqube:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Set up Java
#       uses: actions/setup-java@v2
#       with:
#         java-version: '11' # Adjust to the Java version you need

#     - name: Cache SonarQube Scanner
#       uses: actions/cache@v2
#       with:
#         path: ~/.sonar/cache
#         key: sonarqube-cache-${{ runner.os }}
#         restore-keys: sonarqube-cache-

#     - name: SonarQube Scan
#       run: |
#         sonar-scanner -X \
#           -Dsonar.projectKey=dostream1_application_backend_customer_AYuM21A_as2mrdqZe6MK \
#           -Dproject.settings=./sonarqube/sonar-project.properties \
#           -Dsonar.sources=./ \
#           -Dsonar.host.url="$SONAR_HOST_URL" \
#           -Dsonar.login="$SONAR_TOKEN" # Use 'login' instead of 'token' in GitHub Actions

#     - name: Upload SonarQube Quality Gate
#       uses: sonarsource/sonarcloud-github-action@v1
#       with:
#         organization: ${{ secrets.SONAR_ORGANIZATION }} # Add your SonarCloud organization secret

#     - name: Upload SonarQube Report
#       uses: actions/upload-artifact@v2
#       with:
#         name: sonarqube-report
#         path: .scannerwork/report-task.txt

  # build-Image:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2

  #     - name: Build Docker Image
  #       run: |
  #         VERSION=$(cat version.txt)
  #         export IMAGE_NAME=Buy-it-customer-service:$VERSION
  #         docker build -t $IMAGE_NAME .
  #         echo ${{ secrets.CI_REGISTRY_PASSWORD }} | docker login -u ${{ secrets.CI_REGISTRY_USER }} --password-stdin ${{ secrets.CI_REGISTRY }}
  #         docker tag $IMAGE_NAME nexus.corp.4sconsult.com/Buy-it-customer-service:latest
  #         docker push pirabanjan/$IMAGE_NAM
  #       env:
  #         CI_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
  #         CI_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.CI_REGISTRY_USER }}
          password: ${{ secrets.CI_REGISTRY_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: pirabanjan/buy-it-customer-service
      
      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  Docker-Scan:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install SSH client
        run: apt-get install openssh-client -y

      - name: Set up SSH key for Docker scan
        run: |
          eval $(ssh-agent -s)
          echo -n "$SSH_PRIVATE_KEY_INTERNAL_TRIVY" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan ${{ secrets.SSH_HOST_TRIVY }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Run Trivy scan
        run: |
          echo ${{ secrets.CI_REGISTRY_PASSWORD }} | docker login -u ${{ secrets.CI_REGISTRY_USER }} --password-stdin ${{ secrets.CI_REGISTRY }}
          trivy image --severity CRITICAL,HIGH,MEDIUM --format json -o trivy-results.json nexus.corp.4sconsult.com/Buy-it-customer-service-02-02:latest
        env:
          CI_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
          CI_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}

      - name: Upload Trivy results
        uses: actions/upload-artifact@v2
        with:
          name: trivy-results
          path: trivy-results.json

  OWSAP-Scan:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install required tools for OWSAP scan
        run: |
          apt-get update
          apt-get install -y python3-pip
          pip3 install requests
          apt-get install curl jq coreutils
          TODAY=$(date +%Y-%m-%d)
          ENDDAY=$(date -d "+${DEFECTDOJO_ENGAGEMENT_PERIOD} days" +%Y-%m-%d)
          eval $(ssh-agent -s)
          echo -n "$SSH_PRIVATE_KEY_INTERNAL_TRIVY" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan ${{ secrets.SSH_HOST_TRIVY }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Run OWSAP scan
        run: echo "Running OWSAP scan..."

  defectdojo:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up SSH key for DefectDojo
        run: |
          eval $(ssh-agent -s)
          echo -n "$SSH_PRIVATE_KEY_INTERNAL_TRIVY" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan ${{ secrets.SSH_HOST_TRIVY }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Run DefectDojo script
        run: |
          git clone "https://gitlab-ci-token:${{ secrets.CI_JOB_TOKEN }}@${{ secrets.CI_REPOSITORY_URL }}"
          cd 4sweb-v2
          scp -o StrictHostKeyChecking=no ${{ secrets.SSH_USER_TRIVY }}@${{ secrets.SSH_HOST_TRIVY }}:/home/git-trivy/trivy-results.json trivy-results.json
          ls -la

  # include-dev:
  #   runs-on: ubuntu-latest
  #   needs: [sonarqube, build-Image, Docker-Scan, OWSAP-Scan, defectdojo]
  #   steps:
  #     - name: Include dev.yml
  #       uses: actions/checkout@v2
  #       with:
  #         repository: your-repo/dev-config-repo
  #         path: .github/workflows
  #       if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stg'

  # include-stg:
  #   runs-on: ubuntu-latest
  #   needs: [sonarqube, build-Image, Docker-Scan, OWSAP-Scan, defectdojo]
  #   steps:
  #     - name: Include stg.yml
  #       uses: actions/checkout@v2
  #       with:
  #         repository: your-repo/stg-config-repo
  #         path: .github/workflows
  #       if: github.ref == 'refs/heads/stg' || github.ref == 'refs/heads/main'

  # include-prod:
  #   runs-on: ubuntu-latest
  #   needs: [sonarqube, build-Image, Docker-Scan, OWSAP-Scan, defectdojo]
  #   steps:
  #     - name: Include prod.yml
  #       uses: actions/checkout@v2
  #       with:
  #         repository: your-repo/prod-config-repo
  #         path: .github/workflows
  #       if: github.ref == 'refs/heads/main'
